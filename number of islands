##number of islands

** dfs
class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }
        
        int numIslands = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1') {
                    numIslands++;
                    dfs(grid, i, j);
                }
            }
        }
        
        return numIslands;
    }
    
    private void dfs(char[][] grid, int i, int j) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != '1') {
            return;
        }
        
        grid[i][j] = '0'; // mark as visited
        dfs(grid, i + 1, j); // down
        dfs(grid, i - 1, j); // up
        dfs(grid, i, j + 1); // right
        dfs(grid, i, j - 1); // left
        dfs(grid, i + 1, j + 1); // down-right
        dfs(grid, i + 1, j - 1); // down-left
        dfs(grid, i - 1, j + 1); // up-right
        dfs(grid, i - 1, j - 1); // up-left
    }
}


***********************************************************
#union find


public int numIslands(char[][] grid) {
    if (grid.length == 0) return 0;
    
    int m = grid.length, n = grid[0].length, zeros = 0;
    UnionFind uf = new UnionFind(m * n);
    int[][] D = {
        {0, 1}, {1, 0}, {0, -1}, {-1, 0},
        {1, 1}, {1, -1}, {-1, 1}, {-1, -1}
    };
    
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == '0') {
                zeros++;
                continue;
            }
            for (int[] d : D) {
                int x = i + d[0];
                int y = j + d[1];
                if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == '1') {
                    uf.union(i * n + j, x * n + y);
                }
            }
        }
    }
    
    return uf.size() - zeros;
}

public class UnionFind {

    private int[] parents;
    private int[] rank;
    private int num;

    public UnionFind(int N) {
        num = N;
        parents = new int[N];
        for (int i = 0; i < N; i++) parents[i] = i;
        rank = new int[N];
    }

    public int find(int i) {
        if (parents[i] != i) {
            parents[i] = find(parents[i]); // path compression
        }
        return parents[i];
    }

    public boolean union(int i, int j) {
        int pi = find(i), pj = find(j);
        if (pi == pj) return false;
        if (rank[pi] > rank[pj]) {
            parents[pj] = pi;
        } else {
            parents[pi] = pj;
            if (rank[pi] == rank[pj]) rank[pj]++;
        }
        num--;
        return true;
    }

    public int size() {
        return num;
    }
}

