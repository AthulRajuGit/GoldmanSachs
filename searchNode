#searching node on a bonary tree log(n)

import java.util.*;

public class FullBinaryTreeSearch {

    // Function to find the position of node with value `target` in the full binary tree
   public static int findNodePosition(int target, List<Integer> apSequence) {
    if (target < 1 || apSequence.isEmpty()) return -1; // Invalid input

    int start = 0;
    int end = apSequence.size() - 1;

    while (start <= end) {
        int mid = start + (end - start) / 2;
        int value = apSequence.get(mid);

        if (value == target) {
            return mid +1; // Adjust for 1-based indexing
        } else if (value < target) {
            start = mid + 1;
        } else {
            end = mid - 1;
        }
    }

    return -1; // Node with `target` value not found
}

    public static void main(String[] args) {
        List<Integer> apSequence = Arrays.asList(1, 4, 7, 10, 13,15); // Example arithmetic progression
        int target = 1; // Example target value to search for
        int position = findNodePosition(target, apSequence);
        
        if (position != -1) {
            System.out.println("Node with value " + target + " found at position " + position);
        } else {
            System.out.println("Node with value " + target + " not found");
        }
    }
}
