## recursion

public class Solution {

    public static void main(String[] args) {
        doTestsPass();
    }

    public static int optimalPath(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        return getMaxPath(grid, m - 1, 0);
    }

    private static int getMaxPath(int[][] grid, int i, int j) {
        // Base case: if we reach the top-right corner, return its value
        if (i == 0 && j == grid[0].length - 1) {
            return grid[i][j];
        }

        // Recursive case: calculate the maximum rocks collected by moving north or east
        int maxRocks = Integer.MIN_VALUE;
        if (j < grid[0].length - 1) {
            maxRocks = grid[i][j] + getMaxPath(grid, i, j + 1);
        }
        if (i > 0) {
            maxRocks = Math.max(maxRocks, grid[i][j] + getMaxPath(grid, i - 1, j));
        }

        return maxRocks;
    }



## bottom up

public class Solution {

    public static void main(String[] args) {
        doTestsPass();
    }

    public static int optimalPath(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];

        dp[m-1][0] = grid[m-1][0];

        // Initialize the bottom row (can only come from left)
        for (int j = 1; j < n; j++) {
            dp[m-1][j] = dp[m-1][j-1] + grid[m-1][j];
        }

        // Initialize the leftmost column (can only come from below)
        for (int i = m-2; i >= 0; i--) {
            dp[i][0] = dp[i+1][0] + grid[i][0];
        }

        // Fill the rest of the dp table
        for (int i = m-2; i >= 0; i--) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]) + grid[i][j];
            }
        }

        return dp[0][n-1];

         public static void doTestsPass() {
        int[][] grid1 = {
            {0, 0, 0, 0, 5},
            {0, 1, 1, 1, 0},
            {2, 0, 0, 0, 0}
        };
        assert optimalPath(grid1) == 10 : "Test 1 Failed";

        int[][] grid2 = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        assert optimalPath(grid2) == 29 : "Test 2 Failed";

        int[][] grid3 = {
            {0, 2, 3, 4},
            {5, 6, 7, 8},
            {9, 10, 11, 12},
            {13, 14, 15, 16}
        };
        assert optimalPath(grid3) == 67 : "Test 3 Failed";

        int[][] grid4 = {
            {0, 2},
            {3, 4}
        };
        assert optimalPath(grid4) == 9 : "Test 4 Failed";

        System.out.println("All tests passed");
    }
    }
